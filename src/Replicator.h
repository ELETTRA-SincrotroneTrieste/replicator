//=============================================================================
//
// file :        Replicator.h
//
// description : Include for the Replicator class.
//
// project :	Device Replicator
//
// $Author: claudio $
//
// $Revision: 1.10 $
//
// $Log: Replicator.h,v $
// Revision 1.10  2019-03-19 12:58:22  claudio
// cleanup of unused methods
//
// Revision 1.9  2019-03-18 16:38:32  claudio
// first successful propagation of ATTR_CONF_EVENT
//
// Revision 1.8  2019-03-12 09:19:56  claudio
// prototype of static full configuration of replicated attributes
//
// Revision 1.7  2018-03-06 11:27:29  claudio
// TANGO_BASE_CLASS
//
// Revision 1.6  2017-09-13 08:53:41  claudio
// compiles with tango-9, 64 biit
//
// Revision 1.5  2016-05-04 08:33:13  claudio
// tang9/device_5Impl
//
// Revision 1.4  2013-10-28 09:33:24  claudio
// TANGO_BASE_CLASS
//
// Revision 1.3  2011/03/31 14:45:05  mdm
// Removed ping
//
// Revision 1.1.1.1  2009/12/09 13:24:29  mdm
// first import
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _REPLICATOR_H
#define _REPLICATOR_H

#include <tango.h>
//using namespace Tango;
using namespace std;
/**
 * @author	$Author: claudio $
 * @version	$Revision: 1.10 $
 */

//	Add your own constants definitions here.
//-----------------------------------------------
namespace Replicator_ns {

/**
 * Class Description:
 *
 */

/*
 *	Device States Description:
 *  Tango::RUNNING :
 *  Tango::FAULT :
 */
class AttrConfCallBack;
//forward declaration

class Replicator: public TANGO_BASE_CLASS

{ public :
//	Add your own data members here
//-----------------------------------------

//	Here is the Start of the automatic code generation part
//-------------------------------------------------------------
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
//@}
/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *
 */
std::vector<std::string> attributeList;
/**

 */std::vector<std::string> commandList;
/**
 *
 */
std::string deviceToReplicate;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
Replicator(Tango::DeviceClass *cl,std::string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
Replicator(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
Replicator(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */
~Replicator()
{   delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
void delete_device();
//@}

/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
virtual void always_executed_hook();

//@}

/**
 * @name Replicator methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Extract real attribute values for GenericScalar acquisition result.
 */
virtual void read_GenericAttribute(Tango::Attribute &attr);
/**
 *	Write GenericScalar attribute values to hardware.
 */
virtual void write_GenericAttribute(Tango::WAttribute &attr);

/**
 *      Extract real attribute values for RState acquisition result.
 */
virtual void read_RState(Tango::Attribute &attr);
/**
 *      Extract real attribute values for RStatus acquisition result.
 */
virtual void read_RStatus(Tango::Attribute &attr);

/**
 *      Read/Write allowed for RState attribute.
 */
virtual bool is_RState_allowed(Tango::AttReqType type);
/**
 *      Read/Write allowed for RStatus attribute.
 */
virtual bool is_RStatus_allowed(Tango::AttReqType type);

/**
 *	Read/Write allowed for GenericScalar attribute.
 */
virtual bool is_GenericScalar_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GenericSpectrum attribute.
 */
virtual bool is_GenericSpectrum_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GenericImage attribute.
 */
virtual bool is_GenericImage_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for GenericCommand command.
 */
virtual bool is_GenericCommand_allowed(const CORBA::Any &any);
/**
 *
 *	@exception DevFailed
 */
CORBA::Any* generic_command(std::string cmd_name,Tango::CmdArgType in_type, Tango::CmdArgType out_type, const CORBA::Any &in_any);

/**
 *	Read the device properties from database
 */
void get_device_property();
//@}

//	Here is the end of the automatic code generation part
//-------------------------------------------------------------

protected :
//	Add your own data members here
//-----------------------------------------
Tango::AttributeInfoListEx* attributeInfoListEx;
Tango::CommandInfoList* commandInfoList;

std::vector<Tango::AttributeProxy*> attributeProxyList;

std::map<std::string,Tango::DevBoolean*> devBooleanList;
std::map<std::string,Tango::DevUChar*> devUCharList;
std::map<std::string,Tango::DevShort*> devShortList;
std::map<std::string,Tango::DevUShort*> devUShortList;
std::map<std::string,Tango::DevLong*> devLongList;
std::map<std::string,Tango::DevULong*> devULongList;
std::map<std::string,Tango::DevLong64*> devLong64List;
std::map<std::string,Tango::DevULong64*> devULong64List;
std::map<std::string,Tango::DevFloat*> devFloatList;
std::map<std::string,Tango::DevDouble*> devDoubleList;
std::map<std::string,Tango::DevString*> devStringList;
std::map<std::string,Tango::DevState*> devStateList;

std::map<std::string,Tango::DevBoolean*> devBooleanList_write;
std::map<std::string,Tango::DevUChar*> devUCharList_write;
std::map<std::string,Tango::DevShort*> devShortList_write;
std::map<std::string,Tango::DevUShort*> devUShortList_write;
std::map<std::string,Tango::DevLong*> devLongList_write;
std::map<std::string,Tango::DevULong*> devULongList_write;
std::map<std::string,Tango::DevLong64*> devLong64List_write;
std::map<std::string,Tango::DevULong64*> devULong64List_write;
std::map<std::string,Tango::DevFloat*> devFloatList_write;
std::map<std::string,Tango::DevDouble*> devDoubleList_write;
std::map<std::string,Tango::DevString*> devStringList_write;
std::map<std::string,Tango::DevState*> devStateList_write;

//manage dynamic attribute list
void addToDevTypeMap(string name, int data_type, int maxDimX, int maxDimY);
void addToDevTypeMapWrite(string name, int data_type, int maxDimX, int maxDimY);
void freeAllDevTypeMap();

void add_command(Tango::Command *new_cmd);

//overload of DevImpl method
Tango::DevState dev_state();
const char* dev_status();

//replicator inner state and status
Tango::DevState* rState;
Tango::DevString rStatus;
//std::string rStatusStr;

Tango::DeviceProxy* replicatorProxy;

omni_mutex *mutex;
AttrConfCallBack* confcb;
vector<int> event_id;
friend class AttrConfCallBack;

};

class AttrConfCallBack: public Tango::CallBack, public Tango::LogAdapter {
public:
    AttrConfCallBack(Replicator*);
    ~AttrConfCallBack();
    void
    push_event(Tango::AttrConfEventData*);
protected:
    Replicator* replicator;
};

}	// namespace_ns

#endif	// _REPLICATOR_H

/*
 typedef struct _AttributeInfo
 {
 string             name;
 AttrWriteType      writable;
 AttrDataFormat     data_format;
 int                data_type;
 int                max_dim_x;
 int                max_dim_y;
 string             description;
 string             label;
 string             unit;
 string             standard_unit;
 string             display_unit;
 string             format;
 string             min_value;
 string             max_value;
 string             min_alarm;
 string             max_alarm;
 string             writable_attr_name;
 vector<string>     extensions;
 Tango::DispLevel   disp_level;
 } AttributeInfo;

 typedef struct _CommandInfo
 {
 string           cmd_name;
 long             cmd_tag;
 long             in_type;
 long             out_type;
 string           in_type_desc;
 string           out_type_desc;
 Tango::DispLevel disp_level;
 } CommandInfo;

 */
