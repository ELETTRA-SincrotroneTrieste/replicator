//=============================================================================
//
// file :         ReplicatorClass.h
//
// description :  Include for the ReplicatorClass root class.
//                This class is represents the singleton class for
//                the Replicator device class.
//                It contains all properties and methods which the 
//                Replicator requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: claudio $
//
// $Revision: 1.5 $
//
// $Log: ReplicatorClass.h,v $
// Revision 1.5  2019-05-09 09:42:35  claudio
// #8723: scrittura bool, lettura/scrittura spctrum of long
//
// Revision 1.4  2019-03-19 12:58:22  claudio
// cleanup of unused methods
//
// Revision 1.3  2019-03-18 16:38:32  claudio
// first successful propagation of ATTR_CONF_EVENT
//
// Revision 1.2  2019-03-12 09:19:56  claudio
// prototype of static full configuration of replicated attributes
//
// Revision 1.1.1.1  2009-12-09 13:24:29  mdm
// first import
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _REPLICATORCLASS_H
#define _REPLICATORCLASS_H

#include <tango.h>
#include <Replicator.h>

namespace Replicator_ns { //=====================================
//	Define classes for attributes
//=====================================

class GenericImageAttrib: public Tango::ImageAttr {
public:
    // Parameters:
    //     	name 	The attribute name
    //     	data_type 	The attribute data type
    //     	w_type 	The attribute write type (READ, WRITE, READ_WRITE)
    //     	max_x 	The attribute maximum x dimension
    //     	max_y 	The attribute maximum y dimension
    //     	level 	The attribute display type

    GenericImageAttrib(const char *name, long data_type, Tango::AttrWriteType w_type, long max_x, long max_y,
            Tango::AttributeInfoEx& attinfo);

    ~GenericImageAttrib() {
    }
    ;

    virtual void read(Tango::DeviceImpl *dev, Tango::Attribute &att)

    {
        (static_cast<Replicator *>(dev))->read_GenericAttribute(att);
    }
    virtual void write(Tango::DeviceImpl *dev, Tango::WAttribute &att)

    {
        (static_cast<Replicator *>(dev))->write_GenericAttribute(att);
    }
    virtual bool is_allowed(Tango::DeviceImpl *dev, Tango::AttReqType ty) {
        return (static_cast<Replicator *>(dev))->is_GenericImage_allowed(ty);
    }
};

class GenericSpectrumAttrib: public Tango::SpectrumAttr {
public:
    // Parameters:
    //     	name 	The attribute name
    //     	data_type 	The attribute data type
    //     	w_type 	The attribute write type (READ, WRITE, READ_WRITE)
    //     	max_x 	The attribute maximum x dimension
    //     	level 	The attribute display type

    GenericSpectrumAttrib(const char *name, long data_type, Tango::AttrWriteType w_type, long max_x,
            Tango::AttributeInfoEx& attinfo);
    ~GenericSpectrumAttrib() {
    }
    ;

    virtual void read(Tango::DeviceImpl *dev, Tango::Attribute &att)
    {
        (static_cast<Replicator*>(dev))->read_GenericAttribute(att);
    }
    virtual void write(Tango::DeviceImpl *dev, Tango::WAttribute &att)
    {
        (static_cast<Replicator*>(dev))->write_GenericAttribute(att);
    }
    virtual bool is_allowed(Tango::DeviceImpl *dev, Tango::AttReqType ty) {
        return (static_cast<Replicator*>(dev))->is_GenericSpectrum_allowed(ty);
    }
};

class GenericScalarAttrib: public Tango::Attr {
public:
    // 	Parameters:
    //     	name 	The attribute name
    //     	data_type 	The attribute data type
    //     	disp 	The attribute display level
    //     	w_type 	The attribute type (read, write, read with write ...)
    //     	assoc 	Name of the associated writable attribute. This is used only the read with write attribute

    GenericScalarAttrib(const char *name, long data_type, Tango::AttrWriteType w_type, const char *assoc,
            Tango::AttributeInfoEx& attinfo);

    ~GenericScalarAttrib();

    virtual void read(Tango::DeviceImpl *dev, Tango::Attribute &att)
    {
        (static_cast<Replicator*>(dev))->read_GenericAttribute(att);
    }

    virtual void write(Tango::DeviceImpl *dev, Tango::WAttribute &att)
    {
        (static_cast<Replicator*>(dev))->write_GenericAttribute(att);
    }

    virtual bool is_allowed(Tango::DeviceImpl *dev, Tango::AttReqType ty)
    {
        return (static_cast<Replicator*>(dev))->is_GenericScalar_allowed(ty);
    }
};

class RStatusAttrib: public Tango::Attr {
public:
    RStatusAttrib() :
        Attr("RStatus", Tango::DEV_STRING, Tango::READ) {
    }
    ;
    ~RStatusAttrib() {
    }
    ;

    virtual void read(Tango::DeviceImpl *dev, Tango::Attribute &att) {
        (static_cast<Replicator *>(dev))->read_RStatus(att);
    }
    virtual bool is_allowed(Tango::DeviceImpl *dev, Tango::AttReqType ty) {
        return (static_cast<Replicator *>(dev))->is_RStatus_allowed(ty);
    }
};

class RStateAttrib: public Tango::Attr {
public:
    RStateAttrib() :
        Attr("RState", Tango::DEV_STATE, Tango::READ) {
    }
    ;
    ~RStateAttrib() {
    }
    ;

    virtual void read(Tango::DeviceImpl *dev, Tango::Attribute &att) {
        (static_cast<Replicator *>(dev))->read_RState(att);
    }
    virtual bool is_allowed(Tango::DeviceImpl *dev, Tango::AttReqType ty) {
        return (static_cast<Replicator *>(dev))->is_RState_allowed(ty);
    }
};

//=========================================
//	Define classes for commands
//=========================================
class GenericCommandClass: public Tango::Command {
public:
    // Parameters:
    //     	s 	The command name
    //     	in 	The command input parameter type
    //     	out 	The command output parameter type
    //     	in_desc 	The input parameter description
    //     	out_desc 	The output parameter description
    //     	level 	The command display level

    GenericCommandClass(string& name, Tango::CmdArgType in, Tango::CmdArgType out, string& in_desc, string& out_desc,
            Tango::DispLevel level) :
                Command(name, in, out, in_desc, out_desc, level) {
    }
    ;

    GenericCommandClass(const char *name, Tango::CmdArgType in, Tango::CmdArgType out, const char *in_desc, const char *out_desc,
            Tango::DispLevel level) :
                Command(name, in, out, in_desc, out_desc, level) {
    }
    ;

    GenericCommandClass(string& name, Tango::CmdArgType in, Tango::CmdArgType out) :
        Command(name, in, out) {
    }
    ;

    GenericCommandClass(const char *name, Tango::CmdArgType in, Tango::CmdArgType out) :
        Command(name, in, out) {
    }
    ;

    ~GenericCommandClass() {
    }
    ;

    virtual CORBA::Any *
    execute(Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed(Tango::DeviceImpl *dev, const CORBA::Any &any) {
        return (static_cast<Replicator *>(dev))->is_GenericCommand_allowed(any);
    }
};

//
// The ReplicatorClass singleton definition
//

class
#ifdef WIN32
__declspec(dllexport)
#endif
ReplicatorClass: public Tango::DeviceClass {
public:
    //	properties member data

    //	add your own data members here
    //------------------------------------

public:
    Tango::DbData cl_prop;
    Tango::DbData cl_def_prop;
    Tango::DbData dev_def_prop;

    //	Method prototypes
    static ReplicatorClass *
    init(const char *);
    static ReplicatorClass *
    instance();
    ~ReplicatorClass();
    Tango::DbDatum
    get_class_property(string &);
    Tango::DbDatum
    get_default_device_property(string &);
    Tango::DbDatum
    get_default_class_property(string &);

protected:
    ReplicatorClass(string &);
    static ReplicatorClass *_instance;
    void
    command_factory();
    void
    get_class_property();
    void
    attribute_factory(vector<Tango::Attr *> &);
    void
    write_class_property();
    void
    set_default_property();

private:
    void
    device_factory(const Tango::DevVarStringArray *);
};

}	//	namespace Replicator_ns

#endif // _REPLICATORCLASS_H
